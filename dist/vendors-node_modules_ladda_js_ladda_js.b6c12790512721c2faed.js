"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktemplate"] = self["webpackChunktemplate"] || []).push([["vendors-node_modules_ladda_js_ladda_js"],{

/***/ "./node_modules/ladda/js/ladda.js":
/*!****************************************!*\
  !*** ./node_modules/ladda/js/ladda.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bind\": () => (/* binding */ bind),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"stopAll\": () => (/* binding */ stopAll)\n/* harmony export */ });\n/* harmony import */ var spin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! spin.js */ \"./node_modules/spin.js/spin.js\");\n/*!\r\n * Ladda\r\n * http://lab.hakim.se/ladda\r\n * MIT licensed\r\n *\r\n * Copyright (C) 2018 Hakim El Hattab, http://hakim.se\r\n */\r\n\r\n\r\n\r\n// All currently instantiated instances of Ladda\r\nvar ALL_INSTANCES = [];\r\n\r\n/**\r\n * Creates a new instance of Ladda which wraps the\r\n * target button element.\r\n *\r\n * @return An API object that can be used to control\r\n * the loading animation state.\r\n */\r\nfunction create(button) {\r\n    if (typeof button === 'undefined') {\r\n        console.warn(\"Ladda button target must be defined.\");\r\n        return;\r\n    }\r\n\r\n    // The button must have the class \"ladda-button\"\r\n    if (!button.classList.contains('ladda-button')) {\r\n        button.classList.add('ladda-button');\r\n    }\r\n\r\n    // Style is required, default to \"expand-right\"\r\n    if (!button.hasAttribute('data-style')) {\r\n        button.setAttribute('data-style', 'expand-right');\r\n    }\r\n\r\n    // The text contents must be wrapped in a ladda-label\r\n    // element, create one if it doesn't already exist\r\n    if (!button.querySelector('.ladda-label')) {\r\n        var laddaLabel = document.createElement('span');\r\n        laddaLabel.className = 'ladda-label';\r\n        wrapContent(button, laddaLabel);\r\n    }\r\n\r\n    // The spinner component\r\n    var spinnerWrapper = button.querySelector('.ladda-spinner');\r\n\r\n    // Wrapper element for the spinner\r\n    if (!spinnerWrapper) {\r\n        spinnerWrapper = document.createElement('span');\r\n        spinnerWrapper.className = 'ladda-spinner';\r\n    }\r\n\r\n    button.appendChild(spinnerWrapper);\r\n\r\n    // Timer used to delay starting/stopping\r\n    var timer;\r\n    var spinner;\r\n\r\n    var instance = {\r\n        /**\r\n         * Enter the loading state.\r\n         */\r\n        start: function() {\r\n            // Create the spinner if it doesn't already exist\r\n            if (!spinner) {\r\n                spinner = createSpinner(button);\r\n            }\r\n\r\n            button.disabled = true;\r\n            button.setAttribute('data-loading', '');\r\n\r\n            clearTimeout(timer);\r\n            spinner.spin(spinnerWrapper);\r\n\r\n            this.setProgress(0);\r\n\r\n            return this; // chain\r\n        },\r\n\r\n        /**\r\n         * Enter the loading state, after a delay.\r\n         */\r\n        startAfter: function(delay) {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(function() { instance.start(); }, delay);\r\n\r\n            return this; // chain\r\n        },\r\n\r\n        /**\r\n         * Exit the loading state.\r\n         */\r\n        stop: function() {\r\n            if (instance.isLoading()) {\r\n                button.disabled = false;\r\n                button.removeAttribute('data-loading');   \r\n            }\r\n\r\n            // Kill the animation after a delay to make sure it\r\n            // runs for the duration of the button transition\r\n            clearTimeout(timer);\r\n\r\n            if (spinner) {\r\n                timer = setTimeout(function() { spinner.stop(); }, 1000);\r\n            }\r\n\r\n            return this; // chain\r\n        },\r\n\r\n        /**\r\n         * Toggle the loading state on/off.\r\n         */\r\n        toggle: function() {\r\n            return this.isLoading() ? this.stop() : this.start();\r\n        },\r\n\r\n        /**\r\n         * Sets the width of the visual progress bar inside of\r\n         * this Ladda button\r\n         *\r\n         * @param {number} progress in the range of 0-1\r\n         */\r\n        setProgress: function(progress) {\r\n            // Cap it\r\n            progress = Math.max(Math.min(progress, 1), 0);\r\n\r\n            var progressElement = button.querySelector('.ladda-progress');\r\n\r\n            // Remove the progress bar if we're at 0 progress\r\n            if (progress === 0 && progressElement && progressElement.parentNode) {\r\n                progressElement.parentNode.removeChild(progressElement);\r\n            } else {\r\n                if (!progressElement) {\r\n                    progressElement = document.createElement('div');\r\n                    progressElement.className = 'ladda-progress';\r\n                    button.appendChild(progressElement);\r\n                }\r\n\r\n                progressElement.style.width = ((progress || 0) * button.offsetWidth) + 'px';\r\n            }\r\n        },\r\n\r\n        isLoading: function() {\r\n            return button.hasAttribute('data-loading');\r\n        },\r\n\r\n        remove: function() {\r\n            clearTimeout(timer);\r\n            button.disabled = false;\r\n            button.removeAttribute('data-loading');\r\n\r\n            if (spinner) {\r\n                spinner.stop();\r\n                spinner = null;\r\n            }\r\n\r\n            ALL_INSTANCES.splice(ALL_INSTANCES.indexOf(instance), 1);\r\n        }\r\n    };\r\n\r\n    ALL_INSTANCES.push(instance);\r\n\r\n    return instance;\r\n}\r\n\r\n/**\r\n * Binds the target buttons to automatically enter the\r\n * loading state when clicked.\r\n *\r\n * @param target Either an HTML element or a CSS selector.\r\n * @param options\r\n *          - timeout Number of milliseconds to wait before\r\n *            automatically cancelling the animation.\r\n *          - callback A function to be called with the Ladda\r\n *            instance when a target button is clicked.\r\n */\r\nfunction bind(target, options) {\r\n    var targets;\r\n\r\n    if (typeof target === 'string') {\r\n        targets = document.querySelectorAll(target);\r\n    } else if (typeof target === 'object') {\r\n        targets = [target];\r\n    } else {\r\n        throw new Error('target must be string or object');\r\n    }\r\n\r\n    options = options || {};\r\n\r\n    for (var i = 0; i < targets.length; i++) {\r\n        bindElement(targets[i], options);\r\n    }\r\n}\r\n\r\n/**\r\n * Stops ALL current loading animations.\r\n */\r\nfunction stopAll() {\r\n    for (var i = 0, len = ALL_INSTANCES.length; i < len; i++) {\r\n        ALL_INSTANCES[i].stop();\r\n    }\r\n}\r\n\r\n/**\r\n* Get the first ancestor node from an element, having a\r\n* certain type.\r\n*\r\n* @param elem An HTML element\r\n* @param type an HTML tag type (uppercased)\r\n*\r\n* @return An HTML element\r\n*/\r\nfunction getAncestorOfTagType(elem, type) {\r\n    while (elem.parentNode && elem.tagName !== type) {\r\n        elem = elem.parentNode;\r\n    }\r\n\r\n    return (type === elem.tagName) ? elem : undefined;\r\n}\r\n\r\nfunction createSpinner(button) {\r\n    var height = button.offsetHeight,\r\n        spinnerColor,\r\n        spinnerLines;\r\n\r\n    if (height === 0) {\r\n        // We may have an element that is not visible so\r\n        // we attempt to get the height in a different way\r\n        height = parseFloat(window.getComputedStyle(button).height);\r\n    }\r\n\r\n    // If the button is tall we can afford some padding\r\n    if (height > 32) {\r\n        height *= 0.8;\r\n    }\r\n\r\n    // Prefer an explicit height if one is defined\r\n    if (button.hasAttribute('data-spinner-size')) {\r\n        height = parseInt(button.getAttribute('data-spinner-size'), 10);\r\n    }\r\n\r\n    // Allow buttons to specify the color of the spinner element\r\n    if (button.hasAttribute('data-spinner-color')) {\r\n        spinnerColor = button.getAttribute('data-spinner-color');\r\n    }\r\n\r\n    // Allow buttons to specify the number of lines of the spinner\r\n    if (button.hasAttribute('data-spinner-lines')) {\r\n        spinnerLines = parseInt(button.getAttribute('data-spinner-lines'), 10);\r\n    }\r\n\r\n    var radius = height * 0.2,\r\n        length = radius * 0.6,\r\n        width = radius < 7 ? 2 : 3;\r\n\r\n    return new spin_js__WEBPACK_IMPORTED_MODULE_0__.Spinner({\r\n        color: spinnerColor || '#fff',\r\n        lines: spinnerLines || 12,\r\n        radius: radius,\r\n        length: length,\r\n        width: width,\r\n        animation: 'ladda-spinner-line-fade',\r\n        zIndex: 'auto',\r\n        top: 'auto',\r\n        left: 'auto',\r\n        className: ''\r\n    });\r\n}\r\n\r\nfunction wrapContent(node, wrapper) {\r\n    var r = document.createRange();\r\n    r.selectNodeContents(node);\r\n    r.surroundContents(wrapper);\r\n    node.appendChild(wrapper);\r\n}\r\n\r\nfunction bindElement(element, options) {\r\n    if (typeof element.addEventListener !== 'function') {\r\n        return;\r\n    }\r\n\r\n    var instance = create(element);\r\n    var timeout = -1;\r\n\r\n    element.addEventListener('click', function() {\r\n        // If the button belongs to a form, make sure all the\r\n        // fields in that form are filled out\r\n        var valid = true;\r\n        var form = getAncestorOfTagType(element, 'FORM');\r\n\r\n        if (typeof form !== 'undefined' && !form.hasAttribute('novalidate')) {\r\n            // Modern form validation\r\n            if (typeof form.checkValidity === 'function') {\r\n                valid = form.checkValidity();\r\n            }\r\n        }\r\n\r\n        if (valid) {\r\n            // This is asynchronous to avoid an issue where disabling\r\n            // the button prevents forms from submitting\r\n            instance.startAfter(1);\r\n\r\n            // Set a loading timeout if one is specified\r\n            if (typeof options.timeout === 'number') {\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(instance.stop, options.timeout);\r\n            }\r\n\r\n            // Invoke callbacks\r\n            if (typeof options.callback === 'function') {\r\n                options.callback.apply(null, [instance]);\r\n            }\r\n        }\r\n\r\n    }, false);\r\n}\r\n\n\n//# sourceURL=webpack://template/./node_modules/ladda/js/ladda.js?");

/***/ }),

/***/ "./node_modules/spin.js/spin.js":
/*!**************************************!*\
  !*** ./node_modules/spin.js/spin.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Spinner\": () => (/* binding */ Spinner)\n/* harmony export */ });\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar defaults = {\r\n    lines: 12,\r\n    length: 7,\r\n    width: 5,\r\n    radius: 10,\r\n    scale: 1.0,\r\n    corners: 1,\r\n    color: '#000',\r\n    fadeColor: 'transparent',\r\n    animation: 'spinner-line-fade-default',\r\n    rotate: 0,\r\n    direction: 1,\r\n    speed: 1,\r\n    zIndex: 2e9,\r\n    className: 'spinner',\r\n    top: '50%',\r\n    left: '50%',\r\n    shadow: '0 0 1px transparent',\r\n    position: 'absolute',\r\n};\r\nvar Spinner = /** @class */ (function () {\r\n    function Spinner(opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        this.opts = __assign(__assign({}, defaults), opts);\r\n    }\r\n    /**\r\n     * Adds the spinner to the given target element. If this instance is already\r\n     * spinning, it is automatically removed from its previous target by calling\r\n     * stop() internally.\r\n     */\r\n    Spinner.prototype.spin = function (target) {\r\n        this.stop();\r\n        this.el = document.createElement('div');\r\n        this.el.className = this.opts.className;\r\n        this.el.setAttribute('role', 'progressbar');\r\n        css(this.el, {\r\n            position: this.opts.position,\r\n            width: 0,\r\n            zIndex: this.opts.zIndex,\r\n            left: this.opts.left,\r\n            top: this.opts.top,\r\n            transform: \"scale(\" + this.opts.scale + \")\",\r\n        });\r\n        if (target) {\r\n            target.insertBefore(this.el, target.firstChild || null);\r\n        }\r\n        drawLines(this.el, this.opts);\r\n        return this;\r\n    };\r\n    /**\r\n     * Stops and removes the Spinner.\r\n     * Stopped spinners may be reused by calling spin() again.\r\n     */\r\n    Spinner.prototype.stop = function () {\r\n        if (this.el) {\r\n            if (typeof requestAnimationFrame !== 'undefined') {\r\n                cancelAnimationFrame(this.animateId);\r\n            }\r\n            else {\r\n                clearTimeout(this.animateId);\r\n            }\r\n            if (this.el.parentNode) {\r\n                this.el.parentNode.removeChild(this.el);\r\n            }\r\n            this.el = undefined;\r\n        }\r\n        return this;\r\n    };\r\n    return Spinner;\r\n}());\r\n\r\n/**\r\n * Sets multiple style properties at once.\r\n */\r\nfunction css(el, props) {\r\n    for (var prop in props) {\r\n        el.style[prop] = props[prop];\r\n    }\r\n    return el;\r\n}\r\n/**\r\n * Returns the line color from the given string or array.\r\n */\r\nfunction getColor(color, idx) {\r\n    return typeof color == 'string' ? color : color[idx % color.length];\r\n}\r\n/**\r\n * Internal method that draws the individual lines.\r\n */\r\nfunction drawLines(el, opts) {\r\n    var borderRadius = (Math.round(opts.corners * opts.width * 500) / 1000) + 'px';\r\n    var shadow = 'none';\r\n    if (opts.shadow === true) {\r\n        shadow = '0 2px 4px #000'; // default shadow\r\n    }\r\n    else if (typeof opts.shadow === 'string') {\r\n        shadow = opts.shadow;\r\n    }\r\n    var shadows = parseBoxShadow(shadow);\r\n    for (var i = 0; i < opts.lines; i++) {\r\n        var degrees = ~~(360 / opts.lines * i + opts.rotate);\r\n        var backgroundLine = css(document.createElement('div'), {\r\n            position: 'absolute',\r\n            top: -opts.width / 2 + \"px\",\r\n            width: (opts.length + opts.width) + 'px',\r\n            height: opts.width + 'px',\r\n            background: getColor(opts.fadeColor, i),\r\n            borderRadius: borderRadius,\r\n            transformOrigin: 'left',\r\n            transform: \"rotate(\" + degrees + \"deg) translateX(\" + opts.radius + \"px)\",\r\n        });\r\n        var delay = i * opts.direction / opts.lines / opts.speed;\r\n        delay -= 1 / opts.speed; // so initial animation state will include trail\r\n        var line = css(document.createElement('div'), {\r\n            width: '100%',\r\n            height: '100%',\r\n            background: getColor(opts.color, i),\r\n            borderRadius: borderRadius,\r\n            boxShadow: normalizeShadow(shadows, degrees),\r\n            animation: 1 / opts.speed + \"s linear \" + delay + \"s infinite \" + opts.animation,\r\n        });\r\n        backgroundLine.appendChild(line);\r\n        el.appendChild(backgroundLine);\r\n    }\r\n}\r\nfunction parseBoxShadow(boxShadow) {\r\n    var regex = /^\\s*([a-zA-Z]+\\s+)?(-?\\d+(\\.\\d+)?)([a-zA-Z]*)\\s+(-?\\d+(\\.\\d+)?)([a-zA-Z]*)(.*)$/;\r\n    var shadows = [];\r\n    for (var _i = 0, _a = boxShadow.split(','); _i < _a.length; _i++) {\r\n        var shadow = _a[_i];\r\n        var matches = shadow.match(regex);\r\n        if (matches === null) {\r\n            continue; // invalid syntax\r\n        }\r\n        var x = +matches[2];\r\n        var y = +matches[5];\r\n        var xUnits = matches[4];\r\n        var yUnits = matches[7];\r\n        if (x === 0 && !xUnits) {\r\n            xUnits = yUnits;\r\n        }\r\n        if (y === 0 && !yUnits) {\r\n            yUnits = xUnits;\r\n        }\r\n        if (xUnits !== yUnits) {\r\n            continue; // units must match to use as coordinates\r\n        }\r\n        shadows.push({\r\n            prefix: matches[1] || '',\r\n            x: x,\r\n            y: y,\r\n            xUnits: xUnits,\r\n            yUnits: yUnits,\r\n            end: matches[8],\r\n        });\r\n    }\r\n    return shadows;\r\n}\r\n/**\r\n * Modify box-shadow x/y offsets to counteract rotation\r\n */\r\nfunction normalizeShadow(shadows, degrees) {\r\n    var normalized = [];\r\n    for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {\r\n        var shadow = shadows_1[_i];\r\n        var xy = convertOffset(shadow.x, shadow.y, degrees);\r\n        normalized.push(shadow.prefix + xy[0] + shadow.xUnits + ' ' + xy[1] + shadow.yUnits + shadow.end);\r\n    }\r\n    return normalized.join(', ');\r\n}\r\nfunction convertOffset(x, y, degrees) {\r\n    var radians = degrees * Math.PI / 180;\r\n    var sin = Math.sin(radians);\r\n    var cos = Math.cos(radians);\r\n    return [\r\n        Math.round((x * cos + y * sin) * 1000) / 1000,\r\n        Math.round((-x * sin + y * cos) * 1000) / 1000,\r\n    ];\r\n}\r\n\n\n//# sourceURL=webpack://template/./node_modules/spin.js/spin.js?");

/***/ })

}]);